!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return d})),n.d(t,"d",(function(){return u})),n.d(t,"e",(function(){return s})),n.d(t,"h",(function(){return c})),n.d(t,"f",(function(){return f})),n.d(t,"g",(function(){return m})),n.d(t,"j",(function(){return p})),n.d(t,"i",(function(){return h})),n.d(t,"m",(function(){return y})),n.d(t,"n",(function(){return v})),n.d(t,"k",(function(){return o})),n.d(t,"l",(function(){return l}));let r=[],o=!1;const a=document.querySelector(".menu"),l=!1;var i=function(e){e.preventDefault();var t=e.target.classList;t.contains("selected")?t.remove("selected"):t.add("selected")},c=function(e){e.target.style.opacity=.4,e.target.classList.contains("selected")||e.target.classList.add("selected"),e.target.style.cursor="grabbing",e.dataTransfer.dropEffect="copy",e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("text",e.target.dataset.tileId)},u=function(e){e.target.style.opacity=""},d=function(e){e.preventDefault(),e.target.classList.contains("selected")&&e.target.classList.remove("selected"),e.target.classList.contains("swap")?(a.setAttribute("active-tile-id",null),e.target.classList.remove("swap")):(a.setAttribute("active-tile-id",e.target.getAttribute("data-tile-id")),e.target.classList.add("swap"))},s=function(e){e.preventDefault(),0===e.target.children.length&&e.target.classList.add("over")},f=function(e){e.preventDefault(),e.target.classList.contains("over")&&e.target.classList.remove("over")},m=function(e){return e.preventDefault&&e.preventDefault(),e.dataTransfer.dropEffect="move",!1},p=function(e){return e.preventDefault&&e.preventDefault(),!1},g=null,h=function(e){e.preventDefault();var t=e.target;if(null!==(g=e.dataTransfer.getData("text"))&&""!==g.trim()){var n=document.querySelector('.tile[data-tile-id="'+g+'"]'),o=n.parentElement.dataset.row,a=n.parentElement.dataset.column,l=t.dataset.row,i=t.dataset.column,c=Number(l)-Number(o),u=Number(i)-Number(a),d=null,s=Array.from(document.querySelectorAll(".selected"));for(r=s.map((function(e){return{id:e.dataset.tileId,row:e.parentElement.dataset.row,column:e.parentElement.dataset.column}}));d!=r.length;){d=r.length;for(var f=0;f<d;f+=1){var m=r.shift(),p=document.querySelector('.tile[data-tile-id="'+m.id+'"]');o=p.parentElement.dataset.row,a=p.parentElement.dataset.column,l=c+Number(o),i=u+Number(a);var h=document.querySelector('#board .cell[data-row="'+l+'"][data-column="'+i+'"]');h.children.length>0?r.push(m):(h.appendChild(p),t.classList.remove("over"),t.classList.add("filled"),p.dataset.row=l,p.dataset.column=i)}}r=[],b(),y("tile")}else t.classList.contains("over")&&t.classList.remove("over")},y=function(e){Array.from(document.querySelectorAll("."+e)).forEach((function(e){e.classList.remove("selected"),e.style.opacity=""}))},b=function(){var e=document.querySelector("#bench"),t=[];Array.prototype.forEach.call(e.children,(function(e,n){0==e.children.length&&t.push(e)})),Array.prototype.forEach.call(t,(function(t,n){e.removeChild(t)})),Array.from(e.children).forEach((function(e,t){e.dataset.column=t.toString()}))},v=function(e){a.style.display="show"===e?"block":"none",o=!o}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return i})),n.d(t,"d",(function(){return l})),n.d(t,"a",(function(){return o})),n.d(t,"e",(function(){return r}));const r=35,o=35;var a=function(e){var t=[],n=parseInt(e.getAttribute("data-row")),a=parseInt(e.getAttribute("data-column")),l=document.querySelector("#board");return n>0&&t.push(l.querySelectorAll('.cell[data-row="'+(n-1)+'"][data-column="'+a+'"]')[0]),n<r-1&&t.push(l.querySelectorAll('.cell[data-row="'+(n+1)+'"][data-column="'+a+'"]')[0]),a>0&&t.push(l.querySelectorAll('.cell[data-row="'+n+'"][data-column="'+(a-1)+'"]')[0]),a<o-1&&t.push(l.querySelectorAll('.cell[data-row="'+n+'"][data-column="'+(a+1)+'"]')[0]),t},l=function(){var e=document.querySelector("#board");if(document.getElementById("bench").children.length>0)return!1;var t=[],n=[];for(t.push(e.querySelectorAll(".tile")[0]);t.length>0;){var r=t.pop();n.includes(r)||n.push(r),Array.from(a(r)).forEach((function(e){if(e.children.length>0){var r=e.children[0];n.includes(r)||t.push(r)}}))}return console.log("Seen tiles "+n.length),console.log("All tiles "+e.querySelectorAll(".tile").length),n.length===e.querySelectorAll(".tile").length},i=function(){for(var e=[],t=document.querySelector("#board"),n=0;n<r;n++)for(var a="",l=0;l<o;l++){(i=t.querySelectorAll('.cell[data-row="'+n+'"][data-column="'+l+'"]')[0]).children.length>0?a+=i.children[0].textContent:(a.length>1&&e.push(a),a="")}for(l=0;l<o;l++)for(a="",n=0;n<r;n++){var i;(i=t.querySelectorAll('.cell[data-row="'+n+'"][data-column="'+l+'"]')[0]).children.length>0?a+=i.children[0].textContent:(a.length>1&&e.push(a),a="")}return e},c=function(e,t){for(var n=e.slice(),r=0,o=t;r<o.length;r++){var a=o[r],l=n.indexOf(a);l>-1&&n.splice(l,1)}return n}},,function(e,t,n){"use strict";n.r(t),n.d(t,"dev_join",(function(){return A})),n.d(t,"player_join",(function(){return w})),n.d(t,"load_game",(function(){return _})),n.d(t,"start_game",(function(){return E})),n.d(t,"split",(function(){return S})),n.d(t,"peel",(function(){return L})),n.d(t,"reset",(function(){return x})),n.d(t,"bananagrams",(function(){return j})),n.d(t,"continue_game",(function(){return O})),n.d(t,"swap",(function(){return q})),n.d(t,"socket_state",(function(){return f}));var r=n(0),o=n(1),a=0,l=function(e){var t=[];return Array.prototype.forEach.call(e,(function(e,n){t.push('<div class="cell" data-row="0" data-column="'+n+'"><span class="tile" data-tile-id="'+a+'" draggable="true">'+e+"</span></div>"),a+=1})),t},i=function(){Array.from(Array.from(document.querySelectorAll(".tile"))).forEach((function(e){e.addEventListener("dragstart",r.h,r.l),e.addEventListener("dblclick",r.c),e.addEventListener("click",r.b,r.l),e.addEventListener("dragend",r.d,r.l)}))};function c(e,t,n){console.log(e);var r=e.players[t];if("IDLE"==e.state)d(),$("#join_game").hide(),$(".lobby").show(),$("#options").show(),$("#start_game_button").show();else if("ACTIVE"==e.state){$("#gameplay").show(),$(".lobby").hide(),d(),$("#options").show(),$("#peel_button").show(),$("#swap_button").show(),$("#select_button").show(),$("#tiles_remaining").show(),document.getElementById("tiles_remaining_count").textContent=e.tiles_remaining;var a=Object(o.b)(r,n);n=r,s("bench",l(a)),i()}else if("ENDGAME"==e.state){d(),Array.from(document.querySelectorAll(".tile")).forEach((function(e){e.draggable=!0})),$("#gameplay").show(),$(".lobby").hide(),$("#game-over").hide(),$("#options").show(),$("#swap_button").show(),$("#bananagrams_button").show(),$("#select_button").show();a=Object(o.b)(r,n);n=r,s("bench",l(a)),i()}else if("OVER"==e.state){d(),Array.from(document.querySelectorAll(".tile")).forEach((function(e){e.draggable=!1})),$("#game-over").show(),$("#gameplay").hide(),$(".lobby").hide(),$("#options").show(),$("#continue_game_button").show(),document.getElementById("winning_player").textContent=e.winning_player+" has called Bananagrams. Verify their board and either continue the game or start a new one!";var c=document.getElementById("winning-words");c.innerHTML="",e.winning_words.forEach((function(e){e[1]?c.innerHTML+='<p style="color: green">'+e[0]+"</p>":c.innerHTML+='<p style="color: red">'+e[0]+"</p>"}))}else u("An error occurred: Unknown client state.");return n}function u(e){$("#error").html(e)}function d(){$("#start_game_button").hide(),$("#split_button").hide(),$("#peel_button").hide(),$("#swap_button").hide(),$("#select_button").hide(),$("#bananagrams_button").hide(),$("#continue_game_button").hide(),$("#tiles_remaining").hide()}var s=function(e,t){var n=document.getElementById(e);t.forEach((function(e){n.innerHTML+=e}))},f={player_id:null,game_state:null,dev:!1};let m=[],p=null;const g=window.location.href.split("/"),h=g[g.length-1],y=document.querySelector(".menu");let b=!1;const v=io();function _(){v.emit("load_game",{name:h})}function w(){f.player_id=document.getElementById("player_id").value,localStorage.setItem("player_id",f.player_id),v.emit("player_join",{name:h,player_id:f.player_id}),b=!0}function A(){f.player_id="dev_p1",f.dev=!0,b=!0,_()}function E(){v.emit("start_game",{name:h})}function S(){v.emit("split",{name:h})}function L(){f.dev||Object(o.d)()?v.emit("peel",{name:h}):alert("Your bench must be empty and your board must be valid.")}function q(){if(f.game_state.tiles_remaining<3)alert("Less that 3 tiles remaining, cannot swap.");else{var e=y.getAttribute("active-tile-id"),t=document.querySelector('.tile[data-tile-id="'+e+'"]');try{var n=t.textContent}catch(e){return void alert("No tile selected for swapping, double click a tile to select!")}t.parentNode.removeChild(t);var o=m.indexOf(n);-1!==o&&m.splice(o,1),v.emit("swap",{name:h,letter:n,player_id:f.player_id}),Object(r.a)()}}function j(){if(f.dev||Object(o.d)()){var e=Object(o.c)();v.emit("bananagrams",{name:h,player_id:f.player_id,words:e})}else alert("Your bench must be empty and your board must be valid.")}function O(){v.emit("continue_game",{name:h})}function x(){Array.from(document.querySelectorAll(".tile")).forEach((function(e){e.parentNode.removeChild(e)})),Object(r.a)(),m=[],v.emit("reset",{name:h})}v.on("connect",(function(){v.emit("join",{name:h}),_()})),v.on("render_game",(function(e){if(e.hasOwnProperty("status_code"))if(200==e.status_code){f.game_state=JSON.parse(e.payload),p=f.game_state.players;var t=document.getElementById("players");if(t.innerHTML="",Object.entries(p).forEach((function(e){t.innerHTML+="<li>"+e[0]+"</li>"})),!b)return;m=c(f.game_state,f.player_id,m)}else e.hasOwnProperty("message")?u("An error occurred: "+e.message):u("An error occurred, but no message was given.");else u("Did not recieve a response from the server.")}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,