name: Build and Deploy

on:
  push:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]

    defaults:
      run:
        working-directory: ${{ matrix.component }}

    steps:
    - uses: actions/checkout@v4

    # Backend testing
    - name: Set up Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Poetry (Backend)
      if: matrix.component == 'backend'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      if: matrix.component == 'backend'
      run: poetry install --no-interaction

    - name: Run backend tests
      if: matrix.component == 'backend'
      run: |
        poetry run black --check .
        poetry run flake8 .
        poetry run coverage run -m pytest tests/ -v
        poetry run coverage report

    # Frontend testing
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      if: matrix.component == 'frontend'
      run: npm ci

    - name: Run frontend tests
      if: matrix.component == 'frontend'
      run: |
        npm run lint
        npm run type-check
        npm run test:unit
        npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    # Configure AWS credentials (if deploying to AWS)
    - name: Configure AWS credentials
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Login to Amazon ECR
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build frontend
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    # Build and push frontend Docker image
    - name: Build and push frontend Docker image
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.FRONTEND_ECR_REPOSITORY || 'bananagrams-frontend' }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # Build and push backend Docker image
    - name: Build and push backend Docker image
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.BACKEND_ECR_REPOSITORY || 'bananagrams-backend' }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # Deploy to Elastic Beanstalk (if configured)
    - name: Generate deployment package
      if: ${{ vars.EB_APPLICATION_NAME != '' }}
      run: |
        if [ -f Dockerrun.aws.json ]; then
          zip -g deploy.zip Dockerrun.aws.json
        else
          echo "Dockerrun.aws.json not found, skipping EB deployment"
        fi

    - name: Deploy to Elastic Beanstalk
      if: ${{ vars.EB_APPLICATION_NAME != '' && hashFiles('deploy.zip') != '' }}
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ vars.EB_APPLICATION_NAME }}
        environment_name: ${{ vars.EB_ENVIRONMENT_NAME }}
        region: ${{ vars.AWS_REGION || 'us-east-1' }}
        version_label: bananagrams-${{ github.sha }}
        deployment_package: deploy.zip

    # Alternative: Deploy to other platforms
    - name: Deploy notification
      if: ${{ secrets.AWS_ACCESS_KEY_ID == '' }}
      run: |
        echo "::notice::No AWS credentials found. Skipping deployment to AWS."
        echo "::notice::Images built successfully. Configure AWS secrets and variables for deployment."
